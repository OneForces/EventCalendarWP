<?php
/**
 * taxonomies.php
 *
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π –¥–ª—è CPT ¬´ec_event¬ª –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–∞–±–æ–∫—Å—ã,
 * –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç:
 *  1) –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω –ø—Ä—è–º–æ –∏–∑ –∑–∞–ø–∏—Å–∏ (input + –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª).
 *  2) –í—ã–±–∏—Ä–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Ä–º–∏–Ω –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º <select>.
 *  3) –£–±—Ä–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã –∏ ¬´–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ä—É–±—Ä–∏–∫–∞¬ª 
 *     –∫–∞–∫ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∏, —Ç–∞–∫ –∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ.
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * 1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ ¬´ec_event_type¬ª, ¬´ec_organizer¬ª, ¬´ec_location¬ª.
 *    –ü—Ä–∏ —ç—Ç–æ–º:
 *      ‚Äì 'show_ui' => true  ‚Üí —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é ¬´–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Üí –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª –∏ —Ç. –¥.
 *      ‚Äì 'show_in_rest' => false  ‚Üí —á—Ç–æ–±—ã WP –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª —à—Ç–∞—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å Gutenberg.
 */
add_action( 'init', 'ec_register_event_taxonomies' );
function ec_register_event_taxonomies() {
    register_taxonomy(
        'ec_event_type',
        'ec_event',
        array(
            'label'             => '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            'hierarchical'      => false,
            'public'            => true,
            'show_ui'           => true,
            'show_in_rest'      => false,
            'show_admin_column' => false,
            'rewrite'           => array(
                'slug'       => 'event-type',
                'with_front' => false,
            ),
        )
    );

    register_taxonomy(
        'ec_organizer',
        'ec_event',
        array(
            'label'             => '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
            'hierarchical'      => false,
            'public'            => true,
            'show_ui'           => true,
            'meta_box_cb'       => false, // üîß –æ—Ç–∫–ª—é—á–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–π –º–µ—Ç–∞–±–æ–∫—Å
            'show_in_rest'      => false,
            'show_admin_column' => false,
            'rewrite'           => array(
                'slug'       => 'organizer',
                'with_front' => false,
            ),
        )
    );


    register_taxonomy(
        'ec_location',
        'ec_event',
        array(
            'label'             => '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            'hierarchical'      => false,
            'public'            => true,
            'show_ui'           => true,
            'show_in_rest'      => false,
            'show_admin_column' => false,
            'rewrite'           => array(
                'slug'       => 'location',
                'with_front' => false,
            ),
        )
    );
}

/**
 * 2) –£–¥–∞–ª—è–µ–º —à—Ç–∞—Ç–Ω—ã–µ –º–µ—Ç–∞–±–æ–∫—Å—ã —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∑–∞–ø–∏—Å–∏ CPT ¬´ec_event¬ª,
 *    —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤/—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ–≤.
 */
add_action( 'add_meta_boxes', 'ec_remove_default_taxonomy_metaboxes', 1 );
function ec_remove_default_taxonomy_metaboxes() {
    $post_type = 'ec_event';

    // ¬´ec_event_type¬ª: —É–¥–∞–ª—è–µ–º both ‚Äútypediv‚Äù and ‚Äútagsdiv-ec_event_type‚Äù
    remove_meta_box( 'ec_event_typediv', $post_type, 'side' );
    remove_meta_box( 'tagsdiv-ec_event_type', $post_type, 'side' );

    // ¬´ec_organizer¬ª
    remove_meta_box( 'ec_organizertdiv', $post_type, 'side' );
    remove_meta_box( 'tagsdiv-ec_organizer', $post_type, 'side' );

    // ¬´ec_location¬ª
    remove_meta_box( 'ec_locationdiv', $post_type, 'side' );
    remove_meta_box( 'tagsdiv-ec_location', $post_type, 'side' );
}

/**
 * 3) –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–±–æ–∫—Å—ã —Å input + –∫–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª + –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π <select>.
 */
add_action( 'add_meta_boxes', 'ec_add_custom_taxonomy_metaboxes' );
function ec_add_custom_taxonomy_metaboxes() {
    $post_type = 'ec_event';

    // ¬´–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª
    add_meta_box(
        'ec_event_type_dropdown',
        '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        'ec_render_event_type_metabox',
        $post_type,
        'side',
        'default'
    );

    // ¬´–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä¬ª
    add_meta_box(
        'ec_organizer_dropdown',
        '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
        'ec_render_organizer_metabox',
        $post_type,
        'side',
        'default'
    );

    // ¬´–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è¬ª
    add_meta_box(
        'ec_location_dropdown',
        '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
        'ec_render_location_metabox',
        $post_type,
        'side',
        'default'
    );
}

/**
 * 4) Callback: —Ä–µ–Ω–¥–µ—Ä–∏–º –º–µ—Ç–∞–±–æ–∫—Å ¬´–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª (input + button + select).
 */
function ec_render_event_type_metabox( $post ) {
    wp_nonce_field( basename( __FILE__ ), 'ec_tax_nonce' );

    // 4.1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª:
    if ( isset( $_POST['ec_event_type_new'] ) && check_admin_referer( basename( __FILE__ ), 'ec_tax_nonce' ) ) {
        $new_name = sanitize_text_field( $_POST['ec_event_type_new'] );
        if ( $new_name !== '' ) {
            if ( ! term_exists( $new_name, 'ec_event_type' ) ) {
                wp_insert_term( $new_name, 'ec_event_type' );
            }
            // –û—á–∏—â–∞–µ–º input –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            echo '<script>document.getElementById("ec_event_type_new").value = "";</script>';
        }
    }

    // 4.2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ ¬´ec_event_type¬ª
    $terms = get_terms( array(
        'taxonomy'   => 'ec_event_type',
        'hide_empty' => false,
        'orderby'    => 'name',
        'order'      => 'ASC',
    ) );

    // 4.3) –¢–µ–∫—É—â–∏–π —Ç–µ—Ä–º–∏–Ω –∑–∞–ø–∏—Å–∏ (–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞)
    $current = wp_get_object_terms( $post->ID, 'ec_event_type', array( 'fields' => 'ids' ) );
    $current_id = ( ! empty( $current ) ) ? intval( $current[0] ) : 0;

    // 4.4) –ü–æ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
    echo '<p><label for="ec_event_type_new"><strong>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø:</strong></label><br>';
    echo '<input type="text" id="ec_event_type_new" name="ec_event_type_new" placeholder="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" style="width:100%; margin-bottom:4px;">';
    echo '<button type="submit" class="button" name="ec_event_type_add" value="1">–î–æ–±–∞–≤–∏—Ç—å</button></p>';

    // 4.5) –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π <select> —Å–æ –≤—Å–µ–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏ (—à–∏—Ä–∏–Ω–∞ 80%, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 160px)
    echo '<p><label for="ec_event_type_select"><strong>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:</strong></label><br>';
    echo '<select name="ec_event_type_select" id="ec_event_type_select" style="width:80%; max-width:160px; margin-top:4px;">';
    echo '<option value="0">‚Äî –ù–µ –∑–∞–¥–∞–Ω ‚Äî</option>';
    foreach ( $terms as $term ) {
        $sel = ( $term->term_id === $current_id ) ? 'selected' : '';
        echo '<option value="' . esc_attr( $term->term_id ) . '" ' . $sel . '>' . esc_html( $term->name ) . '</option>';
    }
    echo '</select></p>';
}

/**
 * 5) Callback: —Ä–µ–Ω–¥–µ—Ä–∏–º –º–µ—Ç–∞–±–æ–∫—Å ¬´–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä¬ª.
 */
function ec_render_organizer_metabox( $post ) {
    wp_nonce_field( basename( __FILE__ ), 'ec_tax_nonce' );

    if ( isset( $_POST['ec_organizer_new'] ) && check_admin_referer( basename( __FILE__ ), 'ec_tax_nonce' ) ) {
        $new_name = sanitize_text_field( $_POST['ec_organizer_new'] );
        if ( $new_name !== '' ) {
            if ( ! term_exists( $new_name, 'ec_organizer' ) ) {
                wp_insert_term( $new_name, 'ec_organizer' );
            }
            echo '<script>document.getElementById("ec_organizer_new").value = "";</script>';
        }
    }

    $terms = get_terms( array(
        'taxonomy'   => 'ec_organizer',
        'hide_empty' => false,
        'orderby'    => 'name',
        'order'      => 'ASC',
    ) );
    $current = wp_get_object_terms( $post->ID, 'ec_organizer', array( 'fields' => 'ids' ) );
    $current_id = ( ! empty( $current ) ) ? intval( $current[0] ) : 0;

    echo '<p><label for="ec_organizer_new"><strong>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:</strong></label><br>';
    echo '<input type="text" id="ec_organizer_new" name="ec_organizer_new" placeholder="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" style="width:100%; margin-bottom:4px;">';
    echo '<button type="submit" class="button" name="ec_organizer_add" value="1">–î–æ–±–∞–≤–∏—Ç—å</button></p>';

    echo '<p><label for="ec_organizer_select"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:</strong></label><br>';
    echo '<select name="ec_organizer_select" id="ec_organizer_select" style="width:80%; max-width:160px; margin-top:4px;">';
    echo '<option value="0">‚Äî –ù–µ –∑–∞–¥–∞–Ω ‚Äî</option>';
    foreach ( $terms as $term ) {
        $sel = ( $term->term_id === $current_id ) ? 'selected' : '';
        echo '<option value="' . esc_attr( $term->term_id ) . '" ' . $sel . '>' . esc_html( $term->name ) . '</option>';
    }
    echo '</select></p>';
}

/**
 * 6) Callback: —Ä–µ–Ω–¥–µ—Ä–∏–º –º–µ—Ç–∞–±–æ–∫—Å ¬´–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è¬ª.
 */
function ec_render_location_metabox( $post ) {
    wp_nonce_field( basename( __FILE__ ), 'ec_tax_nonce' );

    if ( isset( $_POST['ec_location_new'] ) && check_admin_referer( basename( __FILE__ ), 'ec_tax_nonce' ) ) {
        $new_name = sanitize_text_field( $_POST['ec_location_new'] );
        if ( $new_name !== '' ) {
            if ( ! term_exists( $new_name, 'ec_location' ) ) {
                wp_insert_term( $new_name, 'ec_location' );
            }
            echo '<script>document.getElementById("ec_location_new").value = "";</script>';
        }
    }

    $terms = get_terms( array(
        'taxonomy'   => 'ec_location',
        'hide_empty' => false,
        'orderby'    => 'name',
        'order'      => 'ASC',
    ) );
    $current = wp_get_object_terms( $post->ID, 'ec_location', array( 'fields' => 'ids' ) );
    $current_id = ( ! empty( $current ) ) ? intval( $current[0] ) : 0;

    echo '<p><label for="ec_location_new"><strong>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:</strong></label><br>';
    echo '<input type="text" id="ec_location_new" name="ec_location_new" placeholder="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" style="width:100%; margin-bottom:4px;">';
    echo '<button type="submit" class="button" name="ec_location_add" value="1">–î–æ–±–∞–≤–∏—Ç—å</button></p>';

    echo '<p><label for="ec_location_select"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:</strong></label><br>';
    echo '<select name="ec_location_select" id="ec_location_select" style="width:80%; max-width:160px; margin-top:4px;">';
    echo '<option value="0">‚Äî –ù–µ –∑–∞–¥–∞–Ω–æ ‚Äî</option>';
    foreach ( $terms as $term ) {
        $sel = ( $term->term_id === $current_id ) ? 'selected' : '';
        echo '<option value="' . esc_attr( $term->term_id ) . '" ' . $sel . '>' . esc_html( $term->name ) . '</option>';
    }
    echo '</select></p>';
}

/**
 * 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ/–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ec_event.
 */
add_action( 'save_post', 'ec_save_event_taxonomies', 10, 2 );
function ec_save_event_taxonomies( $post_id, $post ) {
    // –¢–æ–ª—å–∫–æ –¥–ª—è CPT ec_event
    if ( $post->post_type !== 'ec_event' ) {
        return;
    }
    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
        return;
    }
    if ( ! current_user_can( 'edit_post', $post_id ) ) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º nonce
    if ( ! isset( $_POST['ec_tax_nonce'] ) || ! wp_verify_nonce( $_POST['ec_tax_nonce'], basename( __FILE__ ) ) ) {
        return;
    }

    // 7.1) ¬´–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª
    if ( isset( $_POST['ec_event_type_new'] ) && sanitize_text_field( $_POST['ec_event_type_new'] ) !== '' ) {
        $new_name = sanitize_text_field( $_POST['ec_event_type_new'] );
        if ( ! term_exists( $new_name, 'ec_event_type' ) ) {
            $inserted = wp_insert_term( $new_name, 'ec_event_type' );
            if ( ! is_wp_error( $inserted ) ) {
                $term_id = intval( $inserted['term_id'] );
                wp_set_object_terms( $post_id, array( $term_id ), 'ec_event_type', false );
            }
        }
    } elseif ( isset( $_POST['ec_event_type_select'] ) ) {
        $term_id = intval( $_POST['ec_event_type_select'] );
        if ( $term_id > 0 ) {
            wp_set_object_terms( $post_id, array( $term_id ), 'ec_event_type', false );
        } else {
            wp_set_object_terms( $post_id, array(), 'ec_event_type', false );
        }
    }

    // 7.2) ¬´–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä¬ª
    if ( isset( $_POST['ec_organizer_new'] ) && sanitize_text_field( $_POST['ec_organizer_new'] ) !== '' ) {
        $new_name = sanitize_text_field( $_POST['ec_organizer_new'] );
        if ( ! term_exists( $new_name, 'ec_organizer' ) ) {
            $inserted = wp_insert_term( $new_name, 'ec_organizer' );
            if ( ! is_wp_error( $inserted ) ) {
                $term_id = intval( $inserted['term_id'] );
                wp_set_object_terms( $post_id, array( $term_id ), 'ec_organizer', false );
            }
        }
    } elseif ( isset( $_POST['ec_organizer_select'] ) ) {
        $term_id = intval( $_POST['ec_organizer_select'] );
        if ( $term_id > 0 ) {
            wp_set_object_terms( $post_id, array( $term_id ), 'ec_organizer', false );
        } else {
            wp_set_object_terms( $post_id, array(), 'ec_organizer', false );
        }
    }

    // 7.3) ¬´–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è¬ª
    if ( isset( $_POST['ec_location_new'] ) && sanitize_text_field( $_POST['ec_location_new'] ) !== '' ) {
        $new_name = sanitize_text_field( $_POST['ec_location_new'] );
        if ( ! term_exists( $new_name, 'ec_location' ) ) {
            $inserted = wp_insert_term( $new_name, 'ec_location' );
            if ( ! is_wp_error( $inserted ) ) {
                $term_id = intval( $inserted['term_id'] );
                wp_set_object_terms( $post_id, array( $term_id ), 'ec_location', false );
            }
        }
    } elseif ( isset( $_POST['ec_location_select'] ) ) {
        $term_id = intval( $_POST['ec_location_select'] );
        if ( $term_id > 0 ) {
            wp_set_object_terms( $post_id, array( $term_id ), 'ec_location', false );
        } else {
            wp_set_object_terms( $post_id, array(), 'ec_location', false );
        }
    }
}

/**
 * 8) –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ ¬´–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ä—É–±—Ä–∏–∫–∞¬ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–º–∏
 *    ¬´–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Üí –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è/–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä/–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è¬ª.
 */
add_action( 'admin_head-edit-tags.php', 'ec_hide_parent_fields_on_term_pages' );
function ec_hide_parent_fields_on_term_pages() {
    $screen = get_current_screen();
    if ( ! $screen || $screen->taxonomy === '' ) {
        return;
    }

    // –ü—Ä—è—á–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–∏—Ö —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π
    if ( in_array( $screen->taxonomy, array( 'ec_event_type', 'ec_organizer', 'ec_location' ), true ) ) {
        echo '<style>
            /* –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ ¬´–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ä—É–±—Ä–∏–∫–∞¬ª –≤ —Ñ–æ—Ä–º–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω¬ª */
            .form-field.term-parent-wrap { display: none !important; }
            /* –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ */
            .edit-tags-php .form-field.term-parent-wrap { display: none !important; }
        </style>';
    }
}

/**
 * 9) –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫ —Ç–µ—Ä–º–∏–Ω—É "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"
 */
add_action( 'ec_location_add_form_fields', 'ec_location_add_address_field' );
add_action( 'ec_location_edit_form_fields', 'ec_location_edit_address_field', 10, 2 );
add_action( 'create_ec_location', 'ec_location_save_address' );
add_action( 'edited_ec_location', 'ec_location_save_address' );

function ec_location_add_address_field() {
    ?>
    <div class="form-field term-group">
        <label for="ec_location_address">–ê–¥—Ä–µ—Å</label>
        <input type="text" id="ec_location_address" name="ec_location_address" value="" />
    </div>
    <?php
}

function ec_location_edit_address_field( $term ) {
    $address = get_term_meta( $term->term_id, 'ec_location_address', true );
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row"><label for="ec_location_address">–ê–¥—Ä–µ—Å</label></th>
        <td><input type="text" id="ec_location_address" name="ec_location_address" value="<?php echo esc_attr( $address ); ?>" /></td>
    </tr>
    <?php
}

function ec_location_save_address( $term_id ) {
    if ( isset( $_POST['ec_location_address'] ) ) {
        update_term_meta( $term_id, 'ec_location_address', sanitize_text_field( $_POST['ec_location_address'] ) );
    }
}


// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫ –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
add_action('ec_location_edit_form_fields', function($term) {
    $fields = [
        'region' => '–†–µ–≥–∏–æ–Ω',
        'city' => '–ì–æ—Ä–æ–¥'
    ];
    foreach ($fields as $key => $label) {
        $value = get_term_meta($term->term_id, 'ec_location_' . $key, true);
        echo '<tr class="form-field term-group-wrap">';
        echo '<th scope="row"><label for="ec_location_' . $key . '">' . esc_html($label) . '</label></th>';
        echo '<td><input type="text" name="ec_location_' . $key . '" id="ec_location_' . $key . '" value="' . esc_attr($value) . '" /></td>';
        echo '</tr>';
    }
});

add_action('edited_ec_location', function($term_id) {
    foreach (['region', 'city'] as $key) {
        if (isset($_POST['ec_location_' . $key])) {
            update_term_meta($term_id, 'ec_location_' . $key, sanitize_text_field($_POST['ec_location_' . $key]));
        }
    }
});

// ‚úÖ –î–æ–±–∞–≤–∏–º –º–µ—Ç–∞-–ø–æ–ª—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
add_action('ec_organizer_add_form_fields', 'ec_add_organizer_meta_fields');
add_action('ec_organizer_edit_form_fields', 'ec_edit_organizer_meta_fields', 10, 2);

function ec_add_organizer_meta_fields($taxonomy) {
    ?>
    <div class="form-field">
        <label for="ec_organizer_phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
        <input type="text" name="ec_organizer_phone" id="ec_organizer_phone" />
    </div>
    <div class="form-field">
        <label for="ec_organizer_email">Email</label>
        <input type="email" name="ec_organizer_email" id="ec_organizer_email" />
    </div>
    <div class="form-field">
        <label for="ec_organizer_website">–í–µ–±-—Å–∞–π—Ç</label>
        <input type="url" name="ec_organizer_website" id="ec_organizer_website" />
    </div>
    <?php
}

function ec_edit_organizer_meta_fields($term, $taxonomy) {
    $phone   = get_term_meta($term->term_id, 'ec_organizer_phone', true);
    $email   = get_term_meta($term->term_id, 'ec_organizer_email', true);
    $website = get_term_meta($term->term_id, 'ec_organizer_website', true);
    ?>
    <tr class="form-field">
        <th scope="row"><label for="ec_organizer_phone">–¢–µ–ª–µ—Ñ–æ–Ω</label></th>
        <td><input type="text" name="ec_organizer_phone" id="ec_organizer_phone" value="<?php echo esc_attr($phone); ?>" /></td>
    </tr>
    <tr class="form-field">
        <th scope="row"><label for="ec_organizer_email">Email</label></th>
        <td><input type="email" name="ec_organizer_email" id="ec_organizer_email" value="<?php echo esc_attr($email); ?>" /></td>
    </tr>
    <tr class="form-field">
        <th scope="row"><label for="ec_organizer_website">–í–µ–±-—Å–∞–π—Ç</label></th>
        <td><input type="url" name="ec_organizer_website" id="ec_organizer_website" value="<?php echo esc_attr($website); ?>" /></td>
    </tr>
    <?php
}

// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞-–ø–æ–ª—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞
add_action('created_ec_organizer', 'ec_save_organizer_meta_fields', 10, 2);
add_action('edited_ec_organizer', 'ec_save_organizer_meta_fields', 10, 2);

function ec_save_organizer_meta_fields($term_id) {
    if (isset($_POST['ec_organizer_phone'])) {
        update_term_meta($term_id, 'ec_organizer_phone', sanitize_text_field($_POST['ec_organizer_phone']));
    }
    if (isset($_POST['ec_organizer_email'])) {
        update_term_meta($term_id, 'ec_organizer_email', sanitize_email($_POST['ec_organizer_email']));
    }
    if (isset($_POST['ec_organizer_website'])) {
        update_term_meta($term_id, 'ec_organizer_website', esc_url_raw($_POST['ec_organizer_website']));
    }
}
